import { Composer, Context, Markup, Scenes } from "telegraf";
import { callbackQuery, message } from "telegraf/filters";
import { ScenesId } from "../../scenes";
import { SetupContext, TGContext } from "../../../bot";
import { getOrderAddressesKeyboard } from "../../utils/keybords";
import prisma from "../../../client";
import { RegEx } from "../../../utils/regex";

const setup = new Scenes.WizardScene<SetupContext>(
  ScenesId.SETUP,
  async (ctx) => {
    const addressesButtons = await getOrderAddressesKeyboard();

    if (!ctx.orderAddress) {
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", addressesButtons);
    }

    return ctx.wizard.next();
  },
  Composer.on(callbackQuery("data"), async (ctx) => {
    const { data } = ctx.callbackQuery;
    console.log(data);

    if (!data.startsWith("address_")) {
      return;
    }

    let addressId = Number(data.split("_")[1]);

    const orderAddress = await prisma.orderAddress.findFirst({
      where: {
        id: addressId,
      },
    });

    if (!orderAddress) {
      await ctx.reply("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω");
      return;
    }

    ctx;
    ctx.answerCbQuery();

    await ctx.reply(
      '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ +998711234567',
      Markup.keyboard([Markup.button.contactRequest("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")]).resize(),
    );

    return ctx.wizard.next();
  }),
  async (ctx) => {
    if (!ctx.message) {
      return;
    }

    if ("contact" in ctx.message) {
      ctx.phoneNumber = ctx.message.contact.phone_number;
    }

    if ("text" in ctx.message && RegExp(RegEx.PHONE).test(ctx.message.text)) {
      ctx.phoneNumber = ctx.message.text;
    } else {
      return await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–∏ÃÜ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞");
    }

    if (!ctx.phoneNumber) {
      return await ctx.reply(
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ +998711234567',
        Markup.keyboard([Markup.button.contactRequest("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")]).resize(),
      );
    }

    if (!ctx.deliveryAddress) {
      await ctx.reply(
        "–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –Ω–∞–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
        Markup.keyboard([Markup.button.locationRequest("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å")]).resize(),
      );
    }

    return ctx.wizard.next();
  },
  async (ctx) => {
    if (!ctx.message) {
      return;
    }

    if ("location" in ctx.message) {
      ctx.deliveryAddress = ctx.message.location;
    }

    if ("text" in ctx.message) {
      ctx.deliveryAddress = ctx.message.text;
    }

    ctx.scene.leave();
  },
);

setup.leave(async (ctx) => {
  await ctx.reply("–í—ã –∑–∞—Ä–µ–≥–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:");
  await ctx.replyWithMarkdownV2(
    "```json\n" +
      JSON.stringify({
        "–ê–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏": ctx.deliveryAddress,
        "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": ctx.phoneNumber,
        –¢–æ—á–∫–∞: ctx.orderAddress?.title,
      }) +
      "\n```",
  );
});
export default setup;
